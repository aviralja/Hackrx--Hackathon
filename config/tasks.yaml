structuring_task:

  description: >
    Given a user's unstructured or vague health insurance claim query, extract structured information such as age, gender, procedure, location, policy duration, and claim amount. 
    If any field is not mentioned, return null. Also, generate a `detail_query` that summarizes the information in a professional tone and asks the approver whether the claim is eligible and how much amount can be approved based on the policy.
    ##User Query:

    {user_query}

  expected_output: >
    A valid JSON object with the following structure:
    {
      "age": int | null,
      "gender": "male" | "female" | "other" | null,
      "procedure": string | null,
      "location": string | null,
      "policy_duration": string | null,
      "claim_amount": int | null,
      "detail_query": "A clear, complete sentence asking the approval agent if the claim can be approved and, if so, how much should be granted, based on the extracted information."
    }
  agent: query_structuring_agent
  
approval_task:
  description: >
    You are provided with:
      - A structured insurance claim JSON containing fields such as age, gender, diagnosis, treatment, hospital type, policy duration, and claimed amount.
      - A `detail_query` field generated by the query_structuring_agent, expressing a user concern in natural language.

    Your task is to:
      1. Carefully analyze all fields in the structured input to understand the medical and policy context.
      2. Construct a precise internal query (if needed) to retrieve relevant insurance clauses using the RAG tool.
      3. Decide whether the claim should be approved or denied based on:
          - The coverage terms, sub-limits, and exclusions in the policy.
          - The medical necessity and policy duration.
      4. If approved, estimate the eligible approved amount (this may be equal to, less than, or capped below the claim amount depending on the policy terms).
      5. Provide a **detailed justification** citing exact clauses or conditions from the retrieved policy data.
    
    Constraints:
      - You **must use the RAG tool** to retrieve policy-specific clauses.
      - You must not ask for additional data â€” make a reasoned judgment based solely on the available input and the retrieved policy.
      - If information is insufficient, clearly state so in your justification but still make the best decision possible.
      - Do not rely entirely on the `detail_query`. It is only a hint. Your decision must be based on your own analysis.

  expected_output: >
    A valid JSON object strictly following this structure:
    {
      "approval_status": "approved" | "denied",
      "approved_amount": <int | null>,
      "justification": "<Clear, clause-backed explanation for the decision. Mention specific policy clause IDs, section names, or keywords if available.>"
    }

  agent: approver_agent
